<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s" kind="namespace">
    <compoundname>Alembic::Util::ALEMBIC_VERSION_NS</compoundname>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_exception" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::Exception</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::bool_t</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraits</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_boolean_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kBooleanPOD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_uint8_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kUint8POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_int8_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kInt8POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_uint16_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kUint16POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_int16_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kInt16POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_uint32_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kUint32POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_int32_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kInt32POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_uint64_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kUint64POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_int64_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kInt64POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_float16_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kFloat16POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_float32_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kFloat32POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_float64_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kFloat64POD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_string_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kStringPOD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_enum_3_01k_wstring_p_o_d_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromEnum&lt; kWstringPOD &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01bool__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; bool_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01uint8__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; uint8_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01int8__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; int8_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01uint16__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; uint16_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01int16__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; int16_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01uint32__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; uint32_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01int32__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; int32_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01uint64__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; uint64_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01int64__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; int64_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01float16__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; float16_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01float32__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; float32_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01float64__t_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; float64_t &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01string_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; string &gt;</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_p_o_d_traits_from_type_3_01wstring_01_4" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::PODTraitsFromType&lt; wstring &gt;</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_spooky_hash" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::SpookyHash</innerclass>
    <innerclass refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_digest" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::Digest</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_token_map" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::TokenMap</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::BaseDimensions</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1noncopyable" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::noncopyable</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1totally__ordered" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::totally_ordered</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1mutex" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::mutex</innerclass>
    <innerclass refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1scoped__lock" prot="public">Alembic::Util::ALEMBIC_VERSION_NS::scoped_lock</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3" prot="public" static="no">
        <name>PlainOldDataType</name>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3aae7b63990ad96368f39448fe4705e007" prot="public">
          <name>kBooleanPOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Booleans are difficult to store in arrays in a &apos;one bit per bool&apos; kind of way, so we actually file them as bytes (uint8). But again this is entirely hidden from the end user. Implemented via the &quot;bool_t&quot; type defined above. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3aeff7faeffca3d528b0de39e6c4500d7e" prot="public">
          <name>kUint8POD</name>
          <briefdescription>
<para>Char/UChar. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3aeff5fcf4a2d4d8b635cf431996816745" prot="public">
          <name>kInt8POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a15ddf9ceb6956d4c019267336be027aa" prot="public">
          <name>kUint16POD</name>
          <briefdescription>
<para>Short/UShort. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a090300fbecc1ae197973e4830481c2c0" prot="public">
          <name>kInt16POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a8647d9468b69a3bd65ac62101a2a2a2c" prot="public">
          <name>kUint32POD</name>
          <briefdescription>
<para>Int/UInt. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3afb6abe1a24c95212d9be3dda51bba186" prot="public">
          <name>kInt32POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a22b8460f6d591d69cdba30b3ab36b4fa" prot="public">
          <name>kUint64POD</name>
          <briefdescription>
<para>Long/ULong. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a40cd224adeeb8a084ff43d86f6b0b496" prot="public">
          <name>kInt64POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3ad9d9495b833b917dc31863682b2dd687" prot="public">
          <name>kFloat16POD</name>
          <briefdescription>
<para>Half/Float/Double. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3ad2d0aab6745575814838a8d9dc03411a" prot="public">
          <name>kFloat32POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3abd0ca731fc40c08f06cabaa312929d8c" prot="public">
          <name>kFloat64POD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3afd65ef7aaeff9431e3bca117e7dc43fd" prot="public">
          <name>kStringPOD</name>
          <briefdescription>
<para>String Pointer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a8b5cf4ffac4a53c9f03574b49c4f12ab" prot="public">
          <name>kWstringPOD</name>
          <briefdescription>
<para>Wide String Pointer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a7b1474bcaccec22b8a3a60f99d0f773e" prot="public">
          <name>kNumPlainOldDataTypes</name>
          <briefdescription>
<para>Number of POD. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a3db87d5b60fd7003e8974921501b50e3a0cecc62052debd72e42befaaa2604850" prot="public">
          <name>kUnknownPOD</name>
          <initializer> 127</initializer>
          <briefdescription>
<para>Unknown. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I&apos;m using explicit names here because the terms &apos;int&apos;, &apos;short&apos;, &apos;long&apos;, etc, have different bit-depths on different machine architectures. To avoid any ambiguity whatsoever, I&apos;m just making these explicit. End users will rarely see these anyway, so it&apos;s okay to be a bit pedantic.</para><para>These are always represented in the endian-ness of the host machine when resident in working memory, but need to have an explicit endian-ness when being written out. That&apos;s hidden from the user by HDF5. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="184" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="183" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a5b07fdbb3b2c0ccaeda7e112ff1f2a42" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char Alembic::Util::ALEMBIC_VERSION_NS::byte_t</definition>
        <argsstring></argsstring>
        <name>byte_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes are unsigned chars, by definition. We use bytes in <ref refid="namespace_alembic" kindref="compound">Alembic</ref> as the name of anonymous storage memory, since it is not possible to create arrays of voids. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="56" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a5349117ce6bc058feb9cdc5fcba1a9e3" prot="public" static="no">
        <type>half</type>
        <definition>typedef half Alembic::Util::ALEMBIC_VERSION_NS::float16_t</definition>
        <argsstring></argsstring>
        <name>float16_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="159" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a87b4c9ba0bc7ebf48ace2d8fc4677c8a" prot="public" static="no">
        <type>float</type>
        <definition>typedef float Alembic::Util::ALEMBIC_VERSION_NS::float32_t</definition>
        <argsstring></argsstring>
        <name>float32_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="160" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1aa3922af26ca3019380d7efae34d08aaa" prot="public" static="no">
        <type>double</type>
        <definition>typedef double Alembic::Util::ALEMBIC_VERSION_NS::float64_t</definition>
        <argsstring></argsstring>
        <name>float64_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="161" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a7f57c6e6e3837b227d9393d02b926f66" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; Alembic::Util::uint64_t &gt;</type>
        <definition>typedef BaseDimensions&lt;Alembic::Util::uint64_t&gt; Alembic::Util::ALEMBIC_VERSION_NS::Dimensions</definition>
        <argsstring></argsstring>
        <name>Dimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" line="189" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a90a0e7f32bf87c1b1aed73760d778a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALEMBIC_EXPORT bool</type>
        <definition>ALEMBIC_EXPORT bool Alembic::Util::ALEMBIC_VERSION_NS::isStandardName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>isStandardName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Naming.h" line="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a2dc9b63498acd7c7d2eb0f2ec72fd771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALEMBIC_EXPORT void</type>
        <definition>ALEMBIC_EXPORT void Alembic::Util::ALEMBIC_VERSION_NS::makeStandardName</definition>
        <argsstring>(std::string &amp;name, const char fixChar= &apos;_&apos;)</argsstring>
        <name>makeStandardName</name>
        <param>
          <type>std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>fixChar</declname>
          <defval>&apos;_&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Naming.h" line="56"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a195c17abd38ae49219db0db82a6712b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator==</definition>
        <argsstring>(const bool_t &amp;a, const bool_t &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="105" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ae343c339895dba4d1369645d88ed497a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator==</definition>
        <argsstring>(const bool_t &amp;a, bool b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="111" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1aa0bb9e491faa0a806e3e343dd91285be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator==</definition>
        <argsstring>(bool a, const bool_t &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="117" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a31ddcb38e96327e02269512742292782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator!=</definition>
        <argsstring>(const bool_t &amp;a, const bool_t &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="123" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ac6be7e910b92be5c826f063cf2c8cbb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator!=</definition>
        <argsstring>(const bool_t &amp;a, bool b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="129" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a64adc8c2d3cd440d5afcf93d46037b15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator!=</definition>
        <argsstring>(bool a, const bool_t &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="135" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a29737f8062b4e11742f182f8cf108f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kBooleanPOD, bool_t,&quot;bool_t&quot;, false, BooleanPODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kBooleanPOD</type>
        </param>
        <param>
          <type><ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1bool__t" kindref="compound">bool_t</ref></type>
        </param>
        <param>
          <type>&quot;bool_t&quot;</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>BooleanPODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="254"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a441d1880ac6de91d17c94e7b6b9e2116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kUint8POD, uint8_t,&quot;uint8_t&quot;, 0, Uint8PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kUint8POD</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>&quot;uint8_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Uint8PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="255"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a2de9de0758ecf0b21598bdf2ce0da8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kInt8POD, int8_t,&quot;int8_t&quot;, 0, Int8PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kInt8POD</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>&quot;int8_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Int8PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="256"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a2f2b74f64d017edc1aa4bef4090ec457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kUint16POD, uint16_t,&quot;uint16_t&quot;, 0, Uint16PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kUint16POD</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>&quot;uint16_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Uint16PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="257"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a8d5fc676e95ce6df3e1d9c175d40dc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kInt16POD, int16_t,&quot;int16_t&quot;, 0, Int16PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kInt16POD</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>&quot;int16_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Int16PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="258"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1abc132d75ccf1d16f0ffe72dff8214a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kUint32POD, uint32_t,&quot;uint32_t&quot;, 0, Uint32PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kUint32POD</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>&quot;uint32_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Uint32PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="259"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a10d5885914fb1aab0845471eabe2071a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kInt32POD, int32_t,&quot;int32_t&quot;, 0, Int32PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kInt32POD</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>&quot;int32_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Int32PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="260"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a96c803daa743b6f4380bda560a339048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kUint64POD, uint64_t,&quot;uint64_t&quot;, 0, Uint64PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kUint64POD</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>&quot;uint64_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Uint64PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="261"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a2ce70ba9b7d0c51caf0552654632db79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kInt64POD, int64_t,&quot;int64_t&quot;, 0, Int64PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kInt64POD</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>&quot;int64_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Int64PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="262"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ab4bcd409d7da7be982bbbcae9f2245e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kFloat16POD, float16_t,&quot;float16_t&quot;, 0, Float16PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kFloat16POD</type>
        </param>
        <param>
          <type>float16_t</type>
        </param>
        <param>
          <type>&quot;float16_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Float16PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="263"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a6fcca3152195944b9934cfaf78e41fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kFloat32POD, float32_t,&quot;float32_t&quot;, 0, Float32PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kFloat32POD</type>
        </param>
        <param>
          <type>float32_t</type>
        </param>
        <param>
          <type>&quot;float32_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Float32PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="264"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a5a3cbef65cb834a282504f2229610d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kFloat64POD, float64_t,&quot;float64_t&quot;, 0, Float64PODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kFloat64POD</type>
        </param>
        <param>
          <type>float64_t</type>
        </param>
        <param>
          <type>&quot;float64_t&quot;</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>Float64PODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="265"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ac250809d9ae5fc3841354ac47809c50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kStringPOD, string,&quot;string&quot;,&quot;&quot;, StringPODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kStringPOD</type>
        </param>
        <param>
          <type>string</type>
        </param>
        <param>
          <type>&quot;string&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <param>
          <type>StringPODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="266"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ac63298dc7c5f32e785ae6d904b59483b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Util::ALEMBIC_VERSION_NS::DECLARE_TRAITS</definition>
        <argsstring>(kWstringPOD, wstring,&quot;wstring&quot;, L&quot;&quot;, WstringPODTraits)</argsstring>
        <name>DECLARE_TRAITS</name>
        <param>
          <type>kWstringPOD</type>
        </param>
        <param>
          <type>wstring</type>
        </param>
        <param>
          <type>&quot;wstring&quot;</type>
        </param>
        <param>
          <type>L&quot;&quot;</type>
        </param>
        <param>
          <type>WstringPODTraits</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="267"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ad7f81d6d84297081bb24efd51241c290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Alembic::Util::ALEMBIC_VERSION_NS::PODNumBytes</definition>
        <argsstring>(PlainOldDataType pod)</argsstring>
        <name>PODNumBytes</name>
        <param>
          <type>PlainOldDataType</type>
          <declname>pod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="333" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="332" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a4e78a69142904e0c5a58b7fe54b8c4c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Alembic::Util::ALEMBIC_VERSION_NS::PODName</definition>
        <argsstring>(PlainOldDataType pod)</argsstring>
        <name>PODName</name>
        <param>
          <type>PlainOldDataType</type>
          <declname>pod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="359" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="358" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1aadb3fe8471f940b45b3ad2a99df88157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PlainOldDataType</type>
        <definition>PlainOldDataType Alembic::Util::ALEMBIC_VERSION_NS::PODFromName</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>PODFromName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="386" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="385" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ae0593494b0cec09a93bb70287fed9136" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PlainOldDataType</type>
            <declname>POD</declname>
            <defname>POD</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Alembic::Util::ALEMBIC_VERSION_NS::PODSetDefaultPOD</definition>
        <argsstring>(void *addr)</argsstring>
        <name>PODSetDefaultPOD</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>This actually does work with strings! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="408" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a7932ef8d763096516960a85ea00cd492" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Util::ALEMBIC_VERSION_NS::PODSetDefault</definition>
        <argsstring>(PlainOldDataType pod, void *bytes)</argsstring>
        <name>PODSetDefault</name>
        <param>
          <type>PlainOldDataType</type>
          <declname>pod</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" line="416" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/PlainOldDataType.h" bodystart="415" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a667e93a08b5b970e30c488c7e7cd6660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALEMBIC_EXPORT void</type>
        <definition>ALEMBIC_EXPORT void Alembic::Util::ALEMBIC_VERSION_NS::MurmurHash3_x64_128</definition>
        <argsstring>(const void *key, const size_t len, const size_t podSize, void *out)</argsstring>
        <name>MurmurHash3_x64_128</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>podSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Murmur3.h" line="51"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1a9edce700edfed96700a86634b3ffb50e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; Alembic::Util::ALEMBIC_VERSION_NS::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const Digest &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_digest" kindref="compound">Digest</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Digest.h" line="110" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Digest.h" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1af6ffc8a4587544630271c6b601d676d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator==</definition>
        <argsstring>(const TokenMap &amp;iA, const TokenMap &amp;iB)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_token_map" kindref="compound">TokenMap</ref> &amp;</type>
          <declname>iA</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_token_map" kindref="compound">TokenMap</ref> &amp;</type>
          <declname>iB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/TokenMap.h" line="309" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/TokenMap.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1abf405f67d1bf27f1a2fe151b4d5b5e1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator==</definition>
        <argsstring>(const BaseDimensions&lt; T &gt; &amp;a, const BaseDimensions&lt; Y &gt; &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; Y &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" line="138" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" bodystart="137" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1ad797074e0d2d54af39c76b3372671f8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Alembic::Util::ALEMBIC_VERSION_NS::operator!=</definition>
        <argsstring>(const BaseDimensions&lt; T &gt; &amp;a, const BaseDimensions&lt; Y &gt; &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; Y &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" line="167" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespace_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1abc677fadfebb0b27b700cd970a385c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; Alembic::Util::ALEMBIC_VERSION_NS::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const BaseDimensions&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_util_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_dimensions" kindref="compound">BaseDimensions</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" line="174" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Dimensions.h" bodystart="173" bodyend="186"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Util/Exception.h" line="51"/>
  </compounddef>
</doxygen>
