<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kind="class" prot="public">
    <compoundname>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::Base</basecompoundref>
    <derivedcompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_object" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::OSchemaObject&lt; SCHEMA &gt;</derivedcompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab06096df7fe0eadfdaee6e97e567bcc8" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
        <definition>typedef OObject Alembic::Abc::ALEMBIC_VERSION_NS::OObject::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <reimplementedby refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_object_1a0ad57c2ef9f0f805b682859234e17aa5">this_type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By convention, we always define &quot;this_type&quot; in every Abc class. This convention is relied upon by the unspecified-bool-type conversion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="59" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a5dd773a865c07e08dad9d1a47e471ab7" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
        <definition>typedef OObject Alembic::Abc::ALEMBIC_VERSION_NS::OObject::operator_bool_base_type</definition>
        <argsstring></argsstring>
        <name>operator_bool_base_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="60" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab3ed1cd29f9af3fb92c92e3ec37bea0d" prot="protected" static="no" mutable="no">
        <type>AbcA::ObjectWriterPtr</type>
        <definition>AbcA::ObjectWriterPtr Alembic::Abc::ALEMBIC_VERSION_NS::OObject::m_object</definition>
        <argsstring></argsstring>
        <name>m_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="244" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a11f39f77cf0b5f1c53e682961b46da8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OObject::OObject</definition>
        <argsstring>()</argsstring>
        <name>OObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor creates an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> function set. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="68" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a885b54af1b738de530e288411cb37e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJECT_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OObject::OObject</definition>
        <argsstring>(OBJECT_PTR iParentObject, const std::string &amp;iName, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument(), const Argument &amp;iArg2=Argument())</argsstring>
        <name>OObject</name>
        <param>
          <type>OBJECT_PTR</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This templated, explicit function creates a new object writer. The first argument is any Abc (or AbcCoreAbstract) object which can intrusively be converted to an ObjectWriterPtr to use as a parent, from which the error handler policy for inheritance is also derived. The remaining optional arguments can be used to override the ErrorHandlerPolicy, to specify MetaData, and that&apos;s it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="83" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="260" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a5e2bd9ff497045a9f2908ea3d9f38388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJECT_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OObject::OObject</definition>
        <argsstring>(OBJECT_PTR iPtr, WrapExistingFlag, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument(), const Argument &amp;iArg2=Argument())</argsstring>
        <name>OObject</name>
        <param>
          <type>OBJECT_PTR</type>
          <declname>iPtr</declname>
        </param>
        <param>
          <type>WrapExistingFlag</type>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> wrapper around an existing ObjectWriterPtr, with an optional error handling policy. <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_arguments" kindref="compound">Arguments</ref> can be used to set error handling policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="97" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="89" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1abe3d0a5d79f6f73abb55cc8beb1d6a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ARCHIVE_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OObject::OObject</definition>
        <argsstring>(ARCHIVE_PTR iPtr, TopFlag, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument(), const Argument &amp;iArg2=Argument())</argsstring>
        <name>OObject</name>
        <param>
          <type>ARCHIVE_PTR</type>
          <declname>iPtr</declname>
        </param>
        <param>
          <type>TopFlag</type>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> wrapper around the top object in an archive. <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_arguments" kindref="compound">Arguments</ref> can be used to set error handling policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="114" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="107" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a9b09e427271e6cbdeb2c114fd2101145" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Alembic::Abc::ALEMBIC_VERSION_NS::OObject::~OObject</definition>
        <argsstring>()</argsstring>
        <name>~OObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor used Default assignment operator used. Destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="131"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aa8dda5fb0f983fe7de18f0f8133428cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbcA::ObjectHeader &amp;</type>
        <definition>const AbcA::ObjectHeader&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getHeader</definition>
        <argsstring>() const </argsstring>
        <name>getHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the object&apos;s header. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a9998b54ac95cb36c4bdc180181146718" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getName</definition>
        <argsstring>() const </argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the object&apos;s local name ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="144" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="143" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aff7dc6bab4eacf69a670a786a56c9219" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getFullName</definition>
        <argsstring>() const </argsstring>
        <name>getFullName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the object&apos;s full (unique with the archive) name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="149" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="148" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a39d8f05472b794c9c7796cee60e72e4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const AbcA::MetaData &amp;</type>
        <definition>const AbcA::MetaData&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getMetaData</definition>
        <argsstring>() const </argsstring>
        <name>getMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the object&apos;s metadata. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="154" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="153" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aefbd27e6e1ec0e3e120d0ffa5b8d0139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_archive" kindref="compound">OArchive</ref></type>
        <definition>OArchive Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getArchive</definition>
        <argsstring>()</argsstring>
        <name>getArchive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the object&apos;s archive, handily wrapped in an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_archive" kindref="compound">OArchive</ref> wrapper. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab0e1b14c0724681339de526ba2bf7cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
        <definition>OObject Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getParent</definition>
        <argsstring>()</argsstring>
        <name>getParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the object&apos;s parent, handily wrapped in an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> wrapper. If the object is the top level object, the <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> returned will be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="163"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aad687510aba98cf68cec51d767c88c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getNumChildren</definition>
        <argsstring>()</argsstring>
        <name>getNumChildren</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the number of child objects that this object has. This may change as new children are created for writing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="168"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a096d2d44ebba22a70842700f47f6b131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const AbcA::ObjectHeader &amp;</type>
        <definition>const AbcA::ObjectHeader&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getChildHeader</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getChildHeader</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the headers of each of the child objects created so far. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a6f7b743fa6af55d4c019b1b88e855283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const AbcA::ObjectHeader *</type>
        <definition>const AbcA::ObjectHeader* Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getChildHeader</definition>
        <argsstring>(const std::string &amp;iName)</argsstring>
        <name>getChildHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the header of a named object if it has been created - even if the object no longer exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a1a2bba8d5aa85f8f3a4ec53dffed1218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref></type>
        <definition>OCompoundProperty Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getProperties</definition>
        <argsstring>()</argsstring>
        <name>getProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This returns the single top-level <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> that exists automatically as part of the object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="180"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a0a216c70406092d8907f3096810c0c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
        <definition>OObject Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getChild</definition>
        <argsstring>(size_t iChildIndex)</argsstring>
        <name>getChild</name>
        <param>
          <type>size_t</type>
          <declname>iChildIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> wrapped around a pointer to an already created child. This is distinct from creating a new <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> as a child. If the writer associated with this child no longer exists, this function will return an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="193"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1af96e2f749d3b6c23954323abb4608f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
        <definition>OObject Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getChild</definition>
        <argsstring>(const std::string &amp;iChildName)</argsstring>
        <name>getChild</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iChildName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> wrapped around a pointer to an already created child. This is distinct from creating a new <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref> as a child. If the writer associated with this child no longer exists, this function will return an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="199"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a92bae88cc22358a42f360a048c8beedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Abc::ALEMBIC_VERSION_NS::OObject::addChildInstance</definition>
        <argsstring>(OObject iTarget, const std::string &amp;iName)</argsstring>
        <name>addChildInstance</name>
        <param>
          <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref></type>
          <declname>iTarget</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>-************************************************************************ </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="206"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a8d40e2dc44db20b9d813d31b226f3c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>AbcA::ObjectWriterPtr</type>
        <definition>AbcA::ObjectWriterPtr Alembic::Abc::ALEMBIC_VERSION_NS::OObject::getPtr</definition>
        <argsstring>()</argsstring>
        <name>getPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getPtr, as usual, returns a shared ptr to the underlying AbcCoreAbstract object, in this case the ObjectWriterPtr. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="217" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aaf1a992a287bda45c54cbcde71270918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OObject::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1ad5b1f06443aba3059f084aed110c6d96">reset</reimplements>
        <reimplementedby refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_object_1a19a41c81de029d6aaca811072d654c93">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset returns this function set to an empty, default state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="221" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1adab9809aa01331ec4fa34ef0a89e1e36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Abc::ALEMBIC_VERSION_NS::OObject::valid</definition>
        <argsstring>() const </argsstring>
        <name>valid</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af5d3e83a6ffd138a68554c72946c9cd9">valid</reimplements>
        <reimplementedby refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_object_1ab56447ab9ed1829972ce093534aac06f">valid</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid returns whether this function set is valid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="226" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a38c8b2afd2fa3ecdf33a886adf6229b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OObject::ALEMBIC_OPERATOR_BOOL</definition>
        <argsstring>(valid())</argsstring>
        <name>ALEMBIC_OPERATOR_BOOL</name>
        <param>
          <type>valid()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The unspecified-bool-type operator casts the object to &quot;true&quot; if it is valid, and &quot;false&quot; otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a43b513f41b77d32d63ab72c28e125000" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OObject::init</definition>
        <argsstring>(AbcA::ObjectWriterPtr iParentObject, const std::string &amp;iName, ErrorHandler::Policy iParentPolicy, const Argument &amp;iArg0, const Argument &amp;iArg1, const Argument &amp;iARg2)</argsstring>
        <name>init</name>
        <param>
          <type>AbcA::ObjectWriterPtr</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iParentPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iARg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="241"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="146">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
      </node>
      <node id="145">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object"/>
        <childnode refid="146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="147">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OSchemaObject&lt; SCHEMA &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_object"/>
        <childnode refid="145" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="149">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
        <childnode refid="150" relation="usage">
          <edgelabel>m_errorHandler</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object"/>
        <childnode refid="149" relation="public-inheritance">
        </childnode>
      </node>
      <node id="150">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::ErrorHandler</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_error_handler"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" line="54" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OObject.h" bodystart="53" bodyend="245"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a92bae88cc22358a42f360a048c8beedd" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>addChildInstance</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a38c8b2afd2fa3ecdf33a886adf6229b6" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>ALEMBIC_OPERATOR_BOOL</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af36435a2f134e3bd7ae9452772bbc359" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aacf050bea2aa2dfb2c83ada9c7f010a1" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a10b8bf6b14e26ea73a88fade1d42f193" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aefbd27e6e1ec0e3e120d0ffa5b8d0139" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getArchive</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a0a216c70406092d8907f3096810c0c3e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getChild</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1af96e2f749d3b6c23954323abb4608f73" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getChild</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a096d2d44ebba22a70842700f47f6b131" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getChildHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a6f7b743fa6af55d4c019b1b88e855283" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getChildHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af35d99de9b57714c46c454c03e620268" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getErrorHandler</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a64d9e1f5ed8dfab78f490d3e7a06643f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getErrorHandlerPolicy</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aff7dc6bab4eacf69a670a786a56c9219" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getFullName</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aa8dda5fb0f983fe7de18f0f8133428cb" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a39d8f05472b794c9c7796cee60e72e4a" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a9998b54ac95cb36c4bdc180181146718" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aad687510aba98cf68cec51d767c88c4c" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getNumChildren</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab0e1b14c0724681339de526ba2bf7cdd" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a1a2bba8d5aa85f8f3a4ec53dffed1218" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getProperties</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a8d40e2dc44db20b9d813d31b226f3c8d" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>getPtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a43b513f41b77d32d63ab72c28e125000" prot="private" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>init</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab3ed1cd29f9af3fb92c92e3ec37bea0d" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>m_object</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a11f39f77cf0b5f1c53e682961b46da8c" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>OObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a885b54af1b738de530e288411cb37e08" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>OObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a5e2bd9ff497045a9f2908ea3d9f38388" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>OObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1abe3d0a5d79f6f73abb55cc8beb1d6a39" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>OObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aba8cb00b70a9ea3bad9957037dbd3cbe" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>operator=</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a5dd773a865c07e08dad9d1a47e471ab7" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>operator_bool_base_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1aaf1a992a287bda45c54cbcde71270918" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>reset</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1ab06096df7fe0eadfdaee6e97e567bcc8" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>this_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1adab9809aa01331ec4fa34ef0a89e1e36" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>valid</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object_1a9b09e427271e6cbdeb2c114fd2101145" prot="public" virt="virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OObject</scope><name>~OObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
