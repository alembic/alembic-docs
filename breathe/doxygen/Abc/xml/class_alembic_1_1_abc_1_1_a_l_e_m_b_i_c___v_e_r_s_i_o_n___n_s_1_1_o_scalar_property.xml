<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property" kind="class" prot="public">
    <compoundname>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::ScalarPropertyWriterPtr &gt;</basecompoundref>
    <derivedcompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_typed_scalar_property" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::OTypedScalarProperty&lt; TRAITS &gt;</derivedcompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ae573f14fa4496b5f341ced2e3444c3c8" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property" kindref="compound">OScalarProperty</ref></type>
        <definition>typedef OScalarProperty Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9057283e164e6aca50bfaeb775d430c2">this_type</reimplements>
        <reimplementedby refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_typed_scalar_property_1a7e22193e4a754d49c25af7bf860ab73f">this_type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By convention we always define this_type in Abc classes Used by unspecified-bool-type conversion below </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="57" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a73c316361c30bd7dd2842a07371d6870" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::OScalarProperty</definition>
        <argsstring>()</argsstring>
        <name>OScalarProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor creates an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property" kindref="compound">OScalarProperty</ref> function set. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="65" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a4104dad341e07b6989e6234fc4338bb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJECT_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::OScalarProperty</definition>
        <argsstring>(OBJECT_PTR iParentObject, const std::string &amp;iName, const AbcA::DataType &amp;iDataType, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument(), const Argument &amp;iArg2=Argument())</argsstring>
        <name>OScalarProperty</name>
        <param>
          <type>OBJECT_PTR</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const AbcA::DataType &amp;</type>
          <declname>iDataType</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This templated, explicit function creates a new scalar property writer. The first argument is any Abc (or AbcCoreAbstract) object which can intrusively be converted to a CompoundPropertyWriterPtr to use as a parent, from which the error handler policy for inheritance is also derived. The remaining optional arguments can be used to override the ErrorHandlerPolicy, to specify MetaData, and to specify time sampling or time sampling index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="81"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1aa5fc99392acf2350da7cdd78a9c7f65b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::OScalarProperty</definition>
        <argsstring>(AbcA::ScalarPropertyWriterPtr iPtr, WrapExistingFlag iWrapFlag, ErrorHandler::Policy iPolicy=ErrorHandler::kThrowPolicy)</argsstring>
        <name>OScalarProperty</name>
        <param>
          <type>AbcA::ScalarPropertyWriterPtr</type>
          <declname>iPtr</declname>
          <briefdescription><para>The pointer ... </para></briefdescription>
        </param>
        <param>
          <type>WrapExistingFlag</type>
          <declname>iWrapFlag</declname>
          <briefdescription><para>The flag indicating that wrapping is intended. Even though it&apos;s nonambiguous here, we use it anyway for readability </para></briefdescription>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iPolicy</declname>
          <defval>ErrorHandler::kThrowPolicy</defval>
          <briefdescription><para>Error Handling Policy .. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property" kindref="compound">OScalarProperty</ref> wrapper around an existing ScalarPropertyWriterPtr, arguments are there to specify ErrorHandling policy, </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="102" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" bodystart="86" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a4e358cdf62fcc4b787b6cf45dd4ebe1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::~OScalarProperty</definition>
        <argsstring>()</argsstring>
        <name>~OScalarProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor used Default assignment operator used. Destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="109"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a5eed106f5c295695340eab32f1d1cc1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::getNumSamples</definition>
        <argsstring>() const </argsstring>
        <name>getNumSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of samples contained in the property. This can be any number, including zero. This returns the number of samples that were written, independently of whether or not they were constant. It make change over time as more samples are written. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="120"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a97e8e846e00ff3c65351a799409f2fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::set</definition>
        <argsstring>(const void *iSample)</argsstring>
        <name>set</name>
        <param>
          <type>const void *</type>
          <declname>iSample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a sample from the address of a datum. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="124"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a3ac7197dd6f7e0845f08a016aa75906d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::setFromPrevious</definition>
        <argsstring>()</argsstring>
        <name>setFromPrevious</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a sample from the previous sample. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ae1605cfb8eea2c79e9eb496e2369f58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::setTimeSampling</definition>
        <argsstring>(uint32_t iIndex)</argsstring>
        <name>setTimeSampling</name>
        <param>
          <type>uint32_t</type>
          <declname>iIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the TimeSampling used by this property. If the TimeSampling is changed to Acyclic and the number of samples currently set is more than the number of times provided in the Acyclic TimeSampling, an exception will be thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ab1482ab5942b9f4763d1e8b5376677b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::setTimeSampling</definition>
        <argsstring>(AbcA::TimeSamplingPtr iTime)</argsstring>
        <name>setTimeSampling</name>
        <param>
          <type>AbcA::TimeSamplingPtr</type>
          <declname>iTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the TimeSampling used by this property. If the TimeSampling is changed to Acyclic and the number of samples currently set is more than the number of times provided in the Acyclic TimeSampling, an exception will be thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="140"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a15ab67b21fa8bb7bf4d9ee9182bf7e61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref></type>
        <definition>OCompoundProperty Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::getParent</definition>
        <argsstring>() const </argsstring>
        <name>getParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the parent compound property, handily wrapped in a <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> wrapper. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a24f1aca9f0dd84cc10f2d6f00afba4f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CPROP_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::OScalarProperty</definition>
        <argsstring>(CPROP_PTR iParentProp, const std::string &amp;iName, const AbcA::DataType &amp;iDataType, const Argument &amp;iArg0, const Argument &amp;iArg1, const Argument &amp;iArg2)</argsstring>
        <name>OScalarProperty</name>
        <param>
          <type>CPROP_PTR</type>
          <declname>iParentProp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const AbcA::DataType &amp;</type>
          <declname>iDataType</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="170" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" bodystart="164" bodyend="176"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1acbfb86d1c43e11d1b8cb8a1dfbdf3dc4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty::init</definition>
        <argsstring>(AbcA::CompoundPropertyWriterPtr iParentObject, const std::string &amp;iName, const AbcA::DataType &amp;iDataType, ErrorHandler::Policy iParentPolicy, const Argument &amp;iArg0, const Argument &amp;iArg1, const Argument &amp;iArg2)</argsstring>
        <name>init</name>
        <param>
          <type>AbcA::CompoundPropertyWriterPtr</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const AbcA::DataType &amp;</type>
          <declname>iDataType</declname>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iParentPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="154">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OTypedScalarProperty&lt; TRAITS &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_typed_scalar_property"/>
        <childnode refid="151" relation="public-inheritance">
        </childnode>
      </node>
      <node id="152">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::ScalarPropertyWriterPtr &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t"/>
        <childnode refid="153" relation="public-inheritance">
        </childnode>
      </node>
      <node id="153">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
      </node>
      <node id="151">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property"/>
        <childnode refid="152" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="156">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::ScalarPropertyWriterPtr &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t"/>
        <childnode refid="157" relation="public-inheritance">
        </childnode>
      </node>
      <node id="157">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
        <childnode refid="158" relation="usage">
          <edgelabel>m_errorHandler</edgelabel>
        </childnode>
      </node>
      <node id="155">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property"/>
        <childnode refid="156" relation="public-inheritance">
        </childnode>
      </node>
      <node id="158">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::ErrorHandler</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_error_handler"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" line="53" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OScalarProperty.h" bodystart="51" bodyend="156"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a60f48919bb320e49380f1ff64c571985" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>ALEMBIC_OPERATOR_BOOL</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af36435a2f134e3bd7ae9452772bbc359" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aacf050bea2aa2dfb2c83ada9c7f010a1" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a10b8bf6b14e26ea73a88fade1d42f193" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a0f1a4cb13f68108491552813bb88696e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af35d99de9b57714c46c454c03e620268" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getErrorHandler</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a64d9e1f5ed8dfab78f490d3e7a06643f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getErrorHandlerPolicy</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1aaa52ea351d4bf3fa296a619b752476f0" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ad475a461622add945b742e2e2a49b044" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a54e96572abb02a3ecb6cdf31264dfd21" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a5eed106f5c295695340eab32f1d1cc1a" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getNumSamples</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab5e045f6ffdb8ca0b6678cdf24220257" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a15ab67b21fa8bb7bf4d9ee9182bf7e61" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9913393a5670368effc3f6bbe894bac0" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab19409ecf0eed2b355ee2163f24d013e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getPtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1aa70c0279ef6d27d5028f9eee728b1703" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1acbfb86d1c43e11d1b8cb8a1dfbdf3dc4" prot="private" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>init</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a213293cd8d5ee95f1f884bf79f9e1abb" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ae2faab0e4364ec54384a986c6a94302b" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a93ac80178d68adf93952ee93b9320600" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9db744ba4a57f9f1f53ebed4ee7817fa" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a27ea21c75dee49af089775487f2e88d8" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>m_property</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a0efdcc0c097ef2440ee410a00679a10f" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OBasePropertyT</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a5a9b89231f69041efb05b87bac8f6fea" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OBasePropertyT</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a38bad9e76d0a67db8816a3ab1d4d53c1" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aba8cb00b70a9ea3bad9957037dbd3cbe" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>operator=</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a6d9c6cb32c023202b1ee1d198f336192" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>operator_bool_base_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a73c316361c30bd7dd2842a07371d6870" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a4104dad341e07b6989e6234fc4338bb5" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1aa5fc99392acf2350da7cdd78a9c7f65b" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a24f1aca9f0dd84cc10f2d6f00afba4f5" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>OScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a5a6f8b2b676658168fdb842780caa304" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>reset</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a97e8e846e00ff3c65351a799409f2fe2" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>set</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a3ac7197dd6f7e0845f08a016aa75906d" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>setFromPrevious</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ae1605cfb8eea2c79e9eb496e2369f58c" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>setTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ab1482ab5942b9f4763d1e8b5376677b0" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>setTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1ae573f14fa4496b5f341ced2e3444c3c8" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>this_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab729da97825eefa51ec8ac51d6a38b5f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>valid</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_scalar_property_1a4e358cdf62fcc4b787b6cf45dd4ebe1e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OScalarProperty</scope><name>~OScalarProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
