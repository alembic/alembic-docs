<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kind="class" prot="public">
    <compoundname>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::CompoundPropertyWriterPtr &gt;</basecompoundref>
    <derivedcompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::OSchema&lt; INFO &gt;</derivedcompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ac7ea83d5836164057b9bfb141d5ba1b6" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref></type>
        <definition>typedef OCompoundProperty Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9057283e164e6aca50bfaeb775d430c2">this_type</reimplements>
        <reimplementedby refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema_1adbe7e210c51bf982691cb744f046219a">this_type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By convention we always define this_type in Abc classes Used by unspecified-bool-type conversion below </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="57" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a4398433a261e7029ead68b76577a910f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::OCompoundProperty</definition>
        <argsstring>()</argsstring>
        <name>OCompoundProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor creates an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> function set. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="65" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a07fce13f448d5a2eec030b8d87b68dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CPROP_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::OCompoundProperty</definition>
        <argsstring>(CPROP_PTR iParentObject, const std::string &amp;iName, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument())</argsstring>
        <name>OCompoundProperty</name>
        <param>
          <type>CPROP_PTR</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This templated, explicit function creates a new scalar property writer. The first argument is any Abc (or AbcCoreAbstract) object which can intrusively be converted to a CompoundPropertyWriterPtr to use as a parent, from which the error handler policy for inheritance is also derived. The remaining optional arguments can be used to override the ErrorHandlerPolicy, to specify MetaData. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="79" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="161" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a0c493c06c958baeb6a93cec04f92ee12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CPROP_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::OCompoundProperty</definition>
        <argsstring>(CPROP_PTR iThisObject, WrapExistingFlag iWrapFlag, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument())</argsstring>
        <name>OCompoundProperty</name>
        <param>
          <type>CPROP_PTR</type>
          <declname>iThisObject</declname>
        </param>
        <param>
          <type>WrapExistingFlag</type>
          <declname>iWrapFlag</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> wrapper around an existing CompoundPropertyWriterPtr, with an optional error handling policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="88" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ada457e5985bf10da38443cbf6b716c65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OBJECT_PTR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::OCompoundProperty</definition>
        <argsstring>(OBJECT_PTR iObject, TopFlag, const Argument &amp;iArg0=Argument(), const Argument &amp;iArg1=Argument())</argsstring>
        <name>OCompoundProperty</name>
        <param>
          <type>OBJECT_PTR</type>
          <declname>iObject</declname>
        </param>
        <param>
          <type>TopFlag</type>
          <defname>iTop</defname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
          <defval><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> wrapper around the top properties of an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_object" kindref="compound">OObject</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="97" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="189" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ae5d5f7ab3b35b2dd6e15263b75b23e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::~OCompoundProperty</definition>
        <argsstring>()</argsstring>
        <name>~OCompoundProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor used Default assignment operator used. Destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a6a64e02b624f085a7805303922a9e902" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getNumProperties</definition>
        <argsstring>() const </argsstring>
        <name>getNumProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of properties that have been created thus far. May change as more are created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="112"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1aefb4fe8af9ff5c4cfe9609327b0249fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbcA::PropertyHeader &amp;</type>
        <definition>const AbcA::PropertyHeader&amp; Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getPropertyHeader</definition>
        <argsstring>(size_t i) const </argsstring>
        <name>getPropertyHeader</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the header of a property that has already been added. Property is selected by index. This will throw an exception on out-of-range access. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1af0e06f4551667ebfa0545c6fd91ec32a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const AbcA::PropertyHeader *</type>
        <definition>const AbcA::PropertyHeader* Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getPropertyHeader</definition>
        <argsstring>(const std::string &amp;iName) const </argsstring>
        <name>getPropertyHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the header of a property that has already been added. Property is selected by name. This will return NULL if no property with the given name is found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a3bb8fb4b3d069be425cb81fbc967b0fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t" kindref="compound">OBaseProperty</ref></type>
        <definition>OBaseProperty Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getProperty</definition>
        <argsstring>(size_t i) const </argsstring>
        <name>getProperty</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a wrapped base property version of an ALREADY ADDED property. Will return an empty pointer if the writer for this property no longer exists or was never added. This would primarily be used for introspection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ace909e7f1dd96e4fab67b0613f6a4396" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t" kindref="compound">OBaseProperty</ref></type>
        <definition>OBaseProperty Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getProperty</definition>
        <argsstring>(const std::string &amp;iName) const </argsstring>
        <name>getProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a wrapped base property version of an ALREADY ADDED property. Will return an empty pointer if the writer for this property no longer exists or was never added. This would primarily be used for introspection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a1eb2fbb681b035a2c1cc6631c887c48c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref></type>
        <definition>OCompoundProperty Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::getParent</definition>
        <argsstring>() const </argsstring>
        <name>getParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the parent compound property, handily wrapped in a <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property" kindref="compound">OCompoundProperty</ref> wrapper. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a58cb095b459100c850c50dc5bf18f977" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty::init</definition>
        <argsstring>(AbcA::CompoundPropertyWriterPtr iParentObject, const std::string &amp;iName, ErrorHandler::Policy iParentPolicy, const Argument &amp;iArg0, const Argument &amp;iArg1)</argsstring>
        <name>init</name>
        <param>
          <type>AbcA::CompoundPropertyWriterPtr</type>
          <declname>iParentObject</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iParentPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg0</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_argument" kindref="compound">Argument</ref> &amp;</type>
          <declname>iArg1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="137">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property"/>
        <childnode refid="138" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
      </node>
      <node id="138">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::CompoundPropertyWriterPtr &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="140">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OSchema&lt; INFO &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_schema"/>
        <childnode refid="137" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="141">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
        <childnode refid="144" relation="usage">
          <edgelabel>m_errorHandler</edgelabel>
        </childnode>
      </node>
      <node id="142">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::OBasePropertyT&lt; AbcA::CompoundPropertyWriterPtr &gt;</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="144">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::ErrorHandler</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_error_handler"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" line="53" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/OCompoundProperty.h" bodystart="51" bodyend="148"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a60f48919bb320e49380f1ff64c571985" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>ALEMBIC_OPERATOR_BOOL</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af36435a2f134e3bd7ae9452772bbc359" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aacf050bea2aa2dfb2c83ada9c7f010a1" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a10b8bf6b14e26ea73a88fade1d42f193" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a0f1a4cb13f68108491552813bb88696e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af35d99de9b57714c46c454c03e620268" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getErrorHandler</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a64d9e1f5ed8dfab78f490d3e7a06643f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getErrorHandlerPolicy</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1aaa52ea351d4bf3fa296a619b752476f0" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ad475a461622add945b742e2e2a49b044" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a54e96572abb02a3ecb6cdf31264dfd21" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a6a64e02b624f085a7805303922a9e902" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getNumProperties</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab5e045f6ffdb8ca0b6678cdf24220257" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getObject</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a1eb2fbb681b035a2c1cc6631c887c48c" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a3bb8fb4b3d069be425cb81fbc967b0fe" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ace909e7f1dd96e4fab67b0613f6a4396" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1aefb4fe8af9ff5c4cfe9609327b0249fe" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getPropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1af0e06f4551667ebfa0545c6fd91ec32a" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getPropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9913393a5670368effc3f6bbe894bac0" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab19409ecf0eed2b355ee2163f24d013e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getPtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1aa70c0279ef6d27d5028f9eee728b1703" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a58cb095b459100c850c50dc5bf18f977" prot="private" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>init</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a213293cd8d5ee95f1f884bf79f9e1abb" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ae2faab0e4364ec54384a986c6a94302b" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a93ac80178d68adf93952ee93b9320600" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a9db744ba4a57f9f1f53ebed4ee7817fa" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a27ea21c75dee49af089775487f2e88d8" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>m_property</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a0efdcc0c097ef2440ee410a00679a10f" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OBasePropertyT</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a5a9b89231f69041efb05b87bac8f6fea" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OBasePropertyT</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a4398433a261e7029ead68b76577a910f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a07fce13f448d5a2eec030b8d87b68dbc" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1a0c493c06c958baeb6a93cec04f92ee12" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ada457e5985bf10da38443cbf6b716c65" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a38bad9e76d0a67db8816a3ab1d4d53c1" prot="protected" virt="non-virtual" ambiguityscope="OBasePropertyT&lt; AbcA::CompoundPropertyWriterPtr &gt;::"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>OCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aba8cb00b70a9ea3bad9957037dbd3cbe" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>operator=</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a6d9c6cb32c023202b1ee1d198f336192" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>operator_bool_base_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1a5a6f8b2b676658168fdb842780caa304" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>reset</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ac7ea83d5836164057b9bfb141d5ba1b6" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>this_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_base_property_t_1ab729da97825eefa51ec8ac51d6a38b5f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>valid</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_o_compound_property_1ae5d5f7ab3b35b2dd6e15263b75b23e36" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::OCompoundProperty</scope><name>~OCompoundProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
