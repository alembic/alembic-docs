<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive" kind="class" prot="public">
    <compoundname>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base" prot="public" virt="non-virtual">Alembic::Abc::ALEMBIC_VERSION_NS::Base</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af2146a787119162f6d89dcd2f19ddc46" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive" kindref="compound">IArchive</ref></type>
        <definition>typedef IArchive Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>By convention, we always define &quot;this_type&quot; in every Abc class. This convention is relied upon by the unspecified-bool-type cast </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="58" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a0d81435a69d3428a7c4118be2e46d204" prot="private" static="no" mutable="no">
        <type>AbcA::ArchiveReaderPtr</type>
        <definition>AbcA::ArchiveReaderPtr Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::m_archive</definition>
        <argsstring></argsstring>
        <name>m_archive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="179" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3a8c4d57087aea128937ae2d0035fb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::IArchive</definition>
        <argsstring>()</argsstring>
        <name>IArchive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default constructor creates an empty <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive" kindref="compound">IArchive</ref> function set. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="66" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3acd668fc6d692eb39d8c1745994ef6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ARCHIVE_CTOR</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::IArchive</definition>
        <argsstring>(ARCHIVE_CTOR iCtor, const std::string &amp;iFileName, ErrorHandler::Policy iPolicy=ErrorHandler::kThrowPolicy, AbcA::ReadArraySampleCachePtr iCachePtr=AbcA::ReadArraySampleCachePtr())</argsstring>
        <name>IArchive</name>
        <param>
          <type>ARCHIVE_CTOR</type>
          <declname>iCtor</declname>
          <briefdescription><para>We need to pass in a constructor which provides an explicit link to the concrete implementation of AbcCoreAbstract that we&apos;re using. </para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>iFileName</declname>
          <briefdescription><para>The file name. </para></briefdescription>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iPolicy</declname>
          <defval>ErrorHandler::kThrowPolicy</defval>
        </param>
        <param>
          <type>AbcA::ReadArraySampleCachePtr</type>
          <declname>iCachePtr</declname>
          <defval>AbcA::ReadArraySampleCachePtr()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The explicit constructor opens an existing archive with the given file name. Additional arguments that may be passed are the error handler policy and a pointer to a cache instance. By default, an archive-local cache will be created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="83" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="191" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a633e9d3d0be71c1c8fa6b002db9ab100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::IArchive</definition>
        <argsstring>(AbcA::ArchiveReaderPtr iPtr, WrapExistingFlag, ErrorHandler::Policy iPolicy=ErrorHandler::kThrowPolicy)</argsstring>
        <name>IArchive</name>
        <param>
          <type>AbcA::ArchiveReaderPtr</type>
          <declname>iPtr</declname>
          <briefdescription><para>The pointer ... </para></briefdescription>
        </param>
        <param>
          <type>WrapExistingFlag</type>
        </param>
        <param>
          <type>ErrorHandler::Policy</type>
          <declname>iPolicy</declname>
          <defval>ErrorHandler::kThrowPolicy</defval>
          <briefdescription><para>Optional error handling policy ... </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This attaches an <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive" kindref="compound">IArchive</ref> wrapper around an existing ArchiveReaderPtr, with an optional error handling policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="101" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="87" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1afee7388fb758eb7ba9d7ab4984b2f5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::~IArchive</definition>
        <argsstring>()</argsstring>
        <name>~IArchive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a59df0625211891ff634d9bf98dd13081" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getName</definition>
        <argsstring>() const </argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor Default assignment operator Returns the file name. It is an error to do so with an invalid object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a876e7cded532f1bc89df5df63f09ee70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_object" kindref="compound">IObject</ref></type>
        <definition>IObject Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getTop</definition>
        <argsstring>()</argsstring>
        <name>getTop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This returns the single top-level <ref refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_object" kindref="compound">IObject</ref> that exists automatically as part of the archive. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3ac9f7cb0e6db317ec2905984709f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbcA::ReadArraySampleCachePtr</type>
        <definition>AbcA::ReadArraySampleCachePtr Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getReadArraySampleCachePtr</definition>
        <argsstring>()</argsstring>
        <name>getReadArraySampleCachePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the read array sample cache. It may be a NULL pointer. Caches can be shared amongst separate archives, and caching will is disabled if a NULL cache is returned here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a748ee3710932ac196e4bf64e6b844c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::setReadArraySampleCachePtr</definition>
        <argsstring>(AbcA::ReadArraySampleCachePtr iPtr)</argsstring>
        <name>setReadArraySampleCachePtr</name>
        <param>
          <type>AbcA::ReadArraySampleCachePtr</type>
          <declname>iPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the read array sample cache. It may also be a NULL pointer. Caches can be shared amongst separate archives, and caching will be disabled if a NULL cache is passed here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a04da8f9894c8b60e8f1b3589f3978dcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>AbcA::ArchiveReaderPtr</type>
        <definition>AbcA::ArchiveReaderPtr Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getPtr</definition>
        <argsstring>()</argsstring>
        <name>getPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getPtr, as usual, returns a shared ptr to the underlying AbcCoreAbstract object, in this case the ArchiveReaderPtr. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="144" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1ac04f0cf6067a0c893f92fad0f3c5a973" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1ad5b1f06443aba3059f084aed110c6d96">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset returns this function et to an empty, default state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="148" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1aefb1205a416d0d58c0cd271d89e5335a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AbcA::TimeSamplingPtr</type>
        <definition>AbcA::TimeSamplingPtr Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getTimeSampling</definition>
        <argsstring>(uint32_t iIndex)</argsstring>
        <name>getTimeSampling</name>
        <param>
          <type>uint32_t</type>
          <declname>iIndex</declname>
        </param>
        <briefdescription>
<para>Returns the TimeSampling at a given index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a9da7d8baf2b0fe472b9f617a98aa3480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getNumTimeSamplings</definition>
        <argsstring>()</argsstring>
        <name>getNumTimeSamplings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of TimeSamplingPtrs in the Archive TimeSampling pool. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="155"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1ae2cb18b0444a5eec4e4ff8c4089d5e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>index_t</type>
        <definition>index_t Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getMaxNumSamplesForTimeSamplingIndex</definition>
        <argsstring>(uint32_t iIndex)</argsstring>
        <name>getMaxNumSamplesForTimeSamplingIndex</name>
        <param>
          <type>uint32_t</type>
          <declname>iIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum number of samples written for the TimeSampling at the given index. If an illegal iIndex is specified, or a max number of samplings couldn&apos;t be found for that iIndex (for older archives pre 1.1.3) INDEX_UNKNOWN will be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="161"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a6e6af4c86ed7abb2159c8c698b63857e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::valid</definition>
        <argsstring>() const </argsstring>
        <name>valid</name>
        <reimplements refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af5d3e83a6ffd138a68554c72946c9cd9">valid</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid returns whether this function set is valid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="166" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a09af0a79c381476a59eacf3647e37471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::getArchiveVersion</definition>
        <argsstring>()</argsstring>
        <name>getArchiveVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Alembic library numeric version (see <ref refid="_foundation_8h_source" kindref="compound">Foundation.h</ref>) of this archive file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a1d9c319155d47d3795431a110e26bd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive::ALEMBIC_OPERATOR_BOOL</definition>
        <argsstring>(valid())</argsstring>
        <name>ALEMBIC_OPERATOR_BOOL</name>
        <param>
          <type>valid()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The unspecified-bool-type operator casts the object to &quot;true&quot; if it is valid, and &quot;false&quot; otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="41">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="43">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::Base</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_errorHandler</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>Alembic::Abc::ALEMBIC_VERSION_NS::ErrorHandler</label>
        <link refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_error_handler"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" line="53" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/Abc/IArchive.h" bodystart="52" bodyend="180"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a1d9c319155d47d3795431a110e26bd2f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>ALEMBIC_OPERATOR_BOOL</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af36435a2f134e3bd7ae9452772bbc359" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aacf050bea2aa2dfb2c83ada9c7f010a1" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a10b8bf6b14e26ea73a88fade1d42f193" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>Base</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a09af0a79c381476a59eacf3647e37471" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getArchiveVersion</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1af35d99de9b57714c46c454c03e620268" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getErrorHandler</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1a64d9e1f5ed8dfab78f490d3e7a06643f" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getErrorHandlerPolicy</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1ae2cb18b0444a5eec4e4ff8c4089d5e76" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getMaxNumSamplesForTimeSamplingIndex</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a59df0625211891ff634d9bf98dd13081" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a9da7d8baf2b0fe472b9f617a98aa3480" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getNumTimeSamplings</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a04da8f9894c8b60e8f1b3589f3978dcc" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getPtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3ac9f7cb0e6db317ec2905984709f2c" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getReadArraySampleCachePtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1aefb1205a416d0d58c0cd271d89e5335a" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a876e7cded532f1bc89df5df63f09ee70" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>getTop</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3a8c4d57087aea128937ae2d0035fb9" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>IArchive</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af3acd668fc6d692eb39d8c1745994ef6" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>IArchive</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a633e9d3d0be71c1c8fa6b002db9ab100" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>IArchive</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a0d81435a69d3428a7c4118be2e46d204" prot="private" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>m_archive</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_1aba8cb00b70a9ea3bad9957037dbd3cbe" prot="protected" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>operator=</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1ac04f0cf6067a0c893f92fad0f3c5a973" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>reset</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a748ee3710932ac196e4bf64e6b844c40" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>setReadArraySampleCachePtr</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1af2146a787119162f6d89dcd2f19ddc46" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>this_type</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1a6e6af4c86ed7abb2159c8c698b63857e" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>valid</name></member>
      <member refid="class_alembic_1_1_abc_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_i_archive_1afee7388fb758eb7ba9d7ab4984b2f5d4" prot="public" virt="non-virtual"><scope>Alembic::Abc::ALEMBIC_VERSION_NS::IArchive</scope><name>~IArchive</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
