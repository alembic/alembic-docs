<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader" prot="public" virt="non-virtual">Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</basecompoundref>
    <includes refid="_compound_property_reader_8h" local="no">CompoundPropertyReader.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a96158c29c968fb85eeb8d4275cb60cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::~CompoundPropertyReader</definition>
        <argsstring>()</argsstring>
        <name>~CompoundPropertyReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="59"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a3ff79c07d2567f8cb4c2abb26c9fb01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getNumProperties</definition>
        <argsstring>()=0</argsstring>
        <name>getNumProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of properties read from the file ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a85b6db1ccc8e92d9767a23573f2862f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> &amp;</type>
        <definition>virtual const PropertyHeader&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getPropertyHeader</definition>
        <argsstring>(size_t i)=0</argsstring>
        <name>getPropertyHeader</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the header of a property by index. This will throw an exception on out-of-range access. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aeae3bb695a5ea48bbccd6ec5dc0b718e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> *</type>
        <definition>virtual const PropertyHeader* Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getPropertyHeader</definition>
        <argsstring>(const std::string &amp;iName)=0</argsstring>
        <name>getPropertyHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the header of a property name. This will return a NULL pointer if no header by that name is found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aa536041e3dadf5f3af2f47442e86921b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ScalarPropertyReaderPtr</type>
        <definition>virtual ScalarPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getScalarProperty</definition>
        <argsstring>(const std::string &amp;iName)=0</argsstring>
        <name>getScalarProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Scalar Property by name.. It will return an empty pointer if the property is not scalar or is not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1ae1a0546a6ac991589209a9de91d74a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ArrayPropertyReaderPtr</type>
        <definition>virtual ArrayPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getArrayProperty</definition>
        <argsstring>(const std::string &amp;iName)=0</argsstring>
        <name>getArrayProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Array Property by name.. It will return an empty pointer if the property is not array or is not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="88"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1adb08ea0059fd273fe6fe52e2cb1986cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>CompoundPropertyReaderPtr</type>
        <definition>virtual CompoundPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getCompoundProperty</definition>
        <argsstring>(const std::string &amp;iName)=0</argsstring>
        <name>getCompoundProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Compound Property by name.. It will return an empty pointer if the property is not compound or is not found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1afff1c2af02e3d3fb3fe764459f546eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BasePropertyReaderPtr</type>
        <definition>BasePropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getProperty</definition>
        <argsstring>(const std::string &amp;iName)</argsstring>
        <name>getProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a base property by name. That property can be safely upcast. This is a convenience function that uses getPropertyHeader and the various named &quot;get&quot; functions here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a54345da0fe61ac2932a17f67bf1234e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ScalarPropertyReaderPtr</type>
        <definition>ScalarPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getScalarProperty</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getScalarProperty</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Scalar Property by index. It will return an empty pointer if the property is not scalar or is not found. This is convenience function that uses the above functions to get the answer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a4b1603efb21a24d35f1fc8512af3892a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ArrayPropertyReaderPtr</type>
        <definition>ArrayPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getArrayProperty</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getArrayProperty</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Array Property by index. It will return an empty pointer if the property is not array or is not found. This is convenience function that uses the above functions to get the answer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1abb2561a81c2ac9ff7820717b2f431275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CompoundPropertyReaderPtr</type>
        <definition>CompoundPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getCompoundProperty</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getCompoundProperty</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a Compound Property by index. It will return an empty pointer if the property is not compound or is not found. This is convenience function that uses the above functions to get the answer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="124"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aaf1e573eaeffa534d3cb90fa779f4e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BasePropertyReaderPtr</type>
        <definition>BasePropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader::getProperty</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getProperty</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a base property by index. It is an error to call with out-of-range indices. This is a convenience function that uses getPropertyHeader and the various named &quot;get&quot; functions here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="130"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A CompoundProperty is a group of other properties, possibly Simple or possibly Compound. Every object has at one of these. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="35">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="37">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" line="55" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/CompoundPropertyReader.h" bodystart="53" bodyend="132"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a48fd973036944807cb076c2c477e2b4d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>asArrayPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ab09abe9a2b385089778c98bfb9e5855d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>asCompoundPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a6bb1ea4123627a7af461518a85bc767e" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>asScalarPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1ae1a0546a6ac991589209a9de91d74a94" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getArrayProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a4b1603efb21a24d35f1fc8512af3892a" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getArrayProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1adb08ea0059fd273fe6fe52e2cb1986cb" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1abb2561a81c2ac9ff7820717b2f431275" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getCompoundProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a03810de138b06e8c406841fa9c3c4b11" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ade14c5d7db0efe847d2b214ba45fc071" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af8e668ae08e7a30019e725632a0d90c0" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a9a7b23f534175031581c1cc4862925e8" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a3ff79c07d2567f8cb4c2abb26c9fb01c" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getNumProperties</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a3d48f520baa360218715d1879e4584ca" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getObject</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1acc23e2bb3d7cd24dd81ff1ae80dfbced" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1afff1c2af02e3d3fb3fe764459f546eb0" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aaf1e573eaeffa534d3cb90fa779f4e59" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a85b6db1ccc8e92d9767a23573f2862f1" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getPropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aeae3bb695a5ea48bbccd6ec5dc0b718e" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getPropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1aa536041e3dadf5f3af2f47442e86921b" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a54345da0fe61ac2932a17f67bf1234e7" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getScalarProperty</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af31433c192a5e368108ed61abc6ba9af" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a7e314690fb71ca6588f8f6462e83ffe1" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a5bb42239463323668a463b2689616e54" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a59d897b705e3a3ceeff74ae3e068f64e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a908162fdef5b79229bcb466521890bd6" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a672435062a1e110fd193ea3c7f82744c" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>~BasePropertyReader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader_1a96158c29c968fb85eeb8d4275cb60cc9" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</scope><name>~CompoundPropertyReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
