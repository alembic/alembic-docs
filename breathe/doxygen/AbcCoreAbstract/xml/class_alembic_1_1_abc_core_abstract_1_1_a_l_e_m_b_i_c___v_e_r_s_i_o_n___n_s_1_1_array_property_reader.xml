<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</compoundname>
    <basecompoundref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader" prot="public" virt="non-virtual">Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</basecompoundref>
    <includes refid="_array_property_reader_8h" local="no">ArrayPropertyReader.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a1f8f181ac443567d8401158451159baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::~ArrayPropertyReader</definition>
        <argsstring>()</argsstring>
        <name>~ArrayPropertyReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a3e99e0a0c784dc25f09f4bec19006205" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getNumSamples</definition>
        <argsstring>()=0</argsstring>
        <name>getNumSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of samples contained in the property. This can be any number, including zero. This returns the number of samples that were written, independently of whether or not they were constant. Implementations may (and should) choose to condense identical samples. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a7c8a11190aed21e1e6b33d81d3499428" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::isConstant</definition>
        <argsstring>()=0</argsstring>
        <name>isConstant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ask if we&apos;re constant - no change in value amongst samples, regardless of the time sampling. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a58d9f351423e05934ee6ac6ec6747e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getSample</definition>
        <argsstring>(index_t iSampleIndex, ArraySamplePtr &amp;oSample)=0</argsstring>
        <name>getSample</name>
        <param>
          <type>index_t</type>
          <declname>iSampleIndex</declname>
        </param>
        <param>
          <type>ArraySamplePtr &amp;</type>
          <declname>oSample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It returns a shared pointer to a thing which _is_ the data, in a locked and retrieved form. This represents the point of demand, not below here. Implementations of this library can (and should) utilize the custom-deleter capabilities of the smart_ptr to add locking and unlocking access to cache or management code. It will throw an exception on an out-of-range access. Though it could technically return the pointer by value efficiently enough, we return by reference so that the calling signature mirrors the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_scalar_property_reader" kindref="compound">ScalarPropertyReader</ref>.</para><para>For each <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref>, the ( void * ) data buffer returned in the array sample points to one data element, which in the case of DataType( kStringPOD, 1 ) and DataType( kWstringPOD, 1 ) are arrays of std::string and std::wstring, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a26ba085a9a37e1e62f5753c68dd5eb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; index_t, chrono_t &gt;</type>
        <definition>virtual std::pair&lt;index_t, chrono_t&gt; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getFloorIndex</definition>
        <argsstring>(chrono_t iTime)=0</argsstring>
        <name>getFloorIndex</name>
        <param>
          <type>chrono_t</type>
          <declname>iTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the largest valid index that has a time less than or equal to the given time. Invalid to call this with zero samples. If the minimum sample time is greater than iTime, index 0 will be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a999a66cd63e8598547290c935a849d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; index_t, chrono_t &gt;</type>
        <definition>virtual std::pair&lt;index_t, chrono_t&gt; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getCeilIndex</definition>
        <argsstring>(chrono_t iTime)=0</argsstring>
        <name>getCeilIndex</name>
        <param>
          <type>chrono_t</type>
          <declname>iTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the smallest valid index that has a time greater than the given time. Invalid to call this with zero samples. If the maximum sample time is less than iTime, index numSamples-1 will be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="106"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a04af372a2d0c58290ebcc32e47d5abf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; index_t, chrono_t &gt;</type>
        <definition>virtual std::pair&lt;index_t, chrono_t&gt; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getNearIndex</definition>
        <argsstring>(chrono_t iTime)=0</argsstring>
        <name>getNearIndex</name>
        <param>
          <type>chrono_t</type>
          <declname>iTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the valid index with the closest time to the given time. Invalid to call this with zero samples. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="110"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a9cd234f7b376abfc837df425e9cd801d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getKey</definition>
        <argsstring>(index_t iSampleIndex, ArraySampleKey &amp;oKey)=0</argsstring>
        <name>getKey</name>
        <param>
          <type>index_t</type>
          <declname>iSampleIndex</declname>
        </param>
        <param>
          <type><ref refid="struct_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_key" kindref="compound">ArraySampleKey</ref> &amp;</type>
          <declname>oKey</declname>
        </param>
        <briefdescription>
<para>Expose the key for apps that use their own custom cache management. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a4111a9958aceaa3aa2cd3141e6fe2d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getDimensions</definition>
        <argsstring>(index_t iSampleIndex, Dimensions &amp;oDim)=0</argsstring>
        <name>getDimensions</name>
        <param>
          <type>index_t</type>
          <declname>iSampleIndex</declname>
        </param>
        <param>
          <type>Dimensions &amp;</type>
          <declname>oDim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref> may have incorrect dimensions, (even though the packed data will be correct) expose the correct dimensions here for those clients that need it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a80b613fa01b4db001fe1c3fedc949eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::isScalarLike</definition>
        <argsstring>()=0</argsstring>
        <name>isScalarLike</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A hint about whether this property has 1 and only 1 <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> for each of it&apos;s samples. Array Properties with no samples written to it are still considered scalar like. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1ac0085f19420a9d4cad71fde5c6ae4cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader::getAs</definition>
        <argsstring>(index_t iSample, void *iIntoLocation, PlainOldDataType iPod)=0</argsstring>
        <name>getAs</name>
        <param>
          <type>index_t</type>
          <declname>iSample</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>iIntoLocation</declname>
        </param>
        <param>
          <type>PlainOldDataType</type>
          <declname>iPod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads the data for the requested sample into the memory location specified by iIntoLocation as the requested POD type specified by iPod. Out-of-range indices, or incompatible POD types will cause an exception to be thrown.</para><para>Incompatible POD types include trying to read a std::string, std::wstring, or float16_t as anything OTHER than itself.</para><para>In all cases EXCEPT String and Wstring, the iPod type and the total number of items from getDimensions for this property can be used to determine the size of the memory buffer which iIntoLocation must point to. In the case of String and Wstring, iIntoLocation should be an array of std::string or std::wstring.</para><para>This is one of the only places where we break from POD types at the base, and we&apos;re making an explicit decision to use std::string and std::wstring as core language-level primitives. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An Array Property is a Rank N (usually 1-3) property which has a multidimensional array of identically typed values for each sample. This is distinguished from a Simple Property, which has a single element per sample, and requires less sophisticated resource management. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" line="57" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArrayPropertyReader.h" bodystart="55" bodyend="144"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a48fd973036944807cb076c2c477e2b4d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>asArrayPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ab09abe9a2b385089778c98bfb9e5855d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>asCompoundPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a6bb1ea4123627a7af461518a85bc767e" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>asScalarPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1ac0085f19420a9d4cad71fde5c6ae4cf4" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getAs</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a999a66cd63e8598547290c935a849d65" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getCeilIndex</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a03810de138b06e8c406841fa9c3c4b11" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a4111a9958aceaa3aa2cd3141e6fe2d42" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getDimensions</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a26ba085a9a37e1e62f5753c68dd5eb4a" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getFloorIndex</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ade14c5d7db0efe847d2b214ba45fc071" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a9cd234f7b376abfc837df425e9cd801d" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getKey</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af8e668ae08e7a30019e725632a0d90c0" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a9a7b23f534175031581c1cc4862925e8" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a04af372a2d0c58290ebcc32e47d5abf1" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getNearIndex</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a3e99e0a0c784dc25f09f4bec19006205" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getNumSamples</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a3d48f520baa360218715d1879e4584ca" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getObject</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1acc23e2bb3d7cd24dd81ff1ae80dfbced" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a58d9f351423e05934ee6ac6ec6747e27" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getSample</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af31433c192a5e368108ed61abc6ba9af" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a7e314690fb71ca6588f8f6462e83ffe1" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a5bb42239463323668a463b2689616e54" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a7c8a11190aed21e1e6b33d81d3499428" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isConstant</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a59d897b705e3a3ceeff74ae3e068f64e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a80b613fa01b4db001fe1c3fedc949eb0" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isScalarLike</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a908162fdef5b79229bcb466521890bd6" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader_1a1f8f181ac443567d8401158451159baf" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>~ArrayPropertyReader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a672435062a1e110fd193ea3c7f82744c" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</scope><name>~BasePropertyReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
