<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</compoundname>
    <includes refid="_time_sampling_type_8h" local="no">TimeSamplingType.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa2ee0a91c510274457e30586beec9459" prot="public" static="no">
        <name>AcyclicFlag</name>
        <enumvalue id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa2ee0a91c510274457e30586beec9459a410933d0c44b2441cade4a56beddda00" prot="public">
          <name>kAcyclic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ACYCLIC This enum exists solely as a way of distinguishing between the argument-less static time sampling, and the argument-less acyclic time sampling. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="123" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="123" bodyend="123"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b1e618722a6f0470ed2b3e3ac055fc2" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::m_numSamplesPerCycle</definition>
        <argsstring></argsstring>
        <name>m_numSamplesPerCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="153" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b0a4159b0115ef27e0aea032bf39703" prot="private" static="no" mutable="no">
        <type>chrono_t</type>
        <definition>chrono_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::m_timePerCycle</definition>
        <argsstring></argsstring>
        <name>m_timePerCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="154" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ab4e281bd83ad5721f4d5b711c006d7d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::AcyclicNumSamples</definition>
        <argsstring>()</argsstring>
        <name>AcyclicNumSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a2af070589d3628ba64f9ca08d76c4513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>chrono_t</type>
        <definition>static chrono_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::AcyclicTimePerCycle</definition>
        <argsstring>()</argsstring>
        <name>AcyclicTimePerCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ac3cad2f7db1610e42296ecdb9ed29b5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::TimeSamplingType</definition>
        <argsstring>()</argsstring>
        <name>TimeSamplingType</name>
        <briefdescription>
<para>Uniform default. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="79" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b965f9de9834f67be771fda04abf7aa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::TimeSamplingType</definition>
        <argsstring>(chrono_t iTimePerCycle)</argsstring>
        <name>TimeSamplingType</name>
        <param>
          <type>chrono_t</type>
          <declname>iTimePerCycle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UNIFORM ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="86" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ae62da1edf11d5e39bef2725cdce31999" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::TimeSamplingType</definition>
        <argsstring>(uint32_t iNumSamplesPerCycle, chrono_t iTimePerCycle)</argsstring>
        <name>TimeSamplingType</name>
        <param>
          <type>uint32_t</type>
          <declname>iNumSamplesPerCycle</declname>
        </param>
        <param>
          <type>chrono_t</type>
          <declname>iTimePerCycle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CYCLIC ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="99" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="95" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a8cf90687dec8b4a7934cec9b6ac4b7ee" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::TimeSamplingType</definition>
        <argsstring>(AcyclicFlag)</argsstring>
        <name>TimeSamplingType</name>
        <param>
          <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa2ee0a91c510274457e30586beec9459" kindref="member">AcyclicFlag</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="125" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa3b68e6ad1865c813044721417d9bb44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::operator==</definition>
        <argsstring>(const TimeSamplingType &amp;iRhs) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type" kindref="compound">TimeSamplingType</ref> &amp;</type>
          <declname>iRhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using Default Copy Constructor Using Default Assignment Operator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a3542575ddf45f634ac82af08a3f4f726" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::isUniform</definition>
        <argsstring>() const </argsstring>
        <name>isUniform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asks if the sampling is: Uniform (1 sample per cycle) Cyclic (N&gt;1 samples per cycle) Acyclic (INF samples per cycle - acyclic!) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="139" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b7fbf455d09727aabdb08245ac8d311" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::isCyclic</definition>
        <argsstring>() const </argsstring>
        <name>isCyclic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="141" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1acce996907e3f29f3b1084b853ee42ef1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::isAcyclic</definition>
        <argsstring>() const </argsstring>
        <name>isAcyclic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="146" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="145" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a75a9003709cdc1b371848f9c8eddda07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::getNumSamplesPerCycle</definition>
        <argsstring>() const </argsstring>
        <name>getNumSamplesPerCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="148" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a8f537e0a37ed047f8a8a5ddc28445dc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>chrono_t</type>
        <definition>chrono_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType::getTimePerCycle</definition>
        <argsstring>() const </argsstring>
        <name>getTimePerCycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="150" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="150" bodyend="150"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a7d43ef86bb8bdb8823bb90dc907b15a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ALEMBIC_EXPORT friend std::ostream &amp;</type>
        <definition>ALEMBIC_EXPORT friend std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const TimeSamplingType &amp;tst)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type" kindref="compound">TimeSamplingType</ref> &amp;</type>
          <declname>tst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type" kindref="compound">TimeSamplingType</ref> class controls how properties in Alembic relate time values to their sample indices.</para><para>The default behavior is where there is a time value associated with sample zero, and a uniform time amount between each subsequent sample. This is called &quot;Uniform&quot; time sampling, and would correspond to sampling every frame at 1/24 per second, or similar.</para><para>The second behavior is where there is a period of time over which a fixed number of samples are distributed unevenly - imagine a render scene sampled across a shutter period at shutter-begin-open, shutter-full-open, shutter-begin-close, shutter-full-close. This is (perhaps confusingly) called &quot;Cyclic&quot; time sampling.</para><para>The final behavior is where the time samples are totally uneven. We make a restriction that they must be strictly increasing, as the indices are increasing. This is so we can bisection search to find the lower or upper bounds when searching for floor, ceiling, or nearest samples by comparing time. This is called &quot;Acyclic&quot; time sampling. </para>    </detaileddescription>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" line="69" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/TimeSamplingType.h" bodystart="68" bodyend="159"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa2ee0a91c510274457e30586beec9459" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>AcyclicFlag</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ab4e281bd83ad5721f4d5b711c006d7d0" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>AcyclicNumSamples</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a2af070589d3628ba64f9ca08d76c4513" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>AcyclicTimePerCycle</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a75a9003709cdc1b371848f9c8eddda07" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>getNumSamplesPerCycle</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a8f537e0a37ed047f8a8a5ddc28445dc7" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>getTimePerCycle</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1acce996907e3f29f3b1084b853ee42ef1" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>isAcyclic</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b7fbf455d09727aabdb08245ac8d311" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>isCyclic</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a3542575ddf45f634ac82af08a3f4f726" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>isUniform</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa2ee0a91c510274457e30586beec9459a410933d0c44b2441cade4a56beddda00" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>kAcyclic</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b1e618722a6f0470ed2b3e3ac055fc2" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>m_numSamplesPerCycle</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b0a4159b0115ef27e0aea032bf39703" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>m_timePerCycle</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a7d43ef86bb8bdb8823bb90dc907b15a1" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1aa3b68e6ad1865c813044721417d9bb44" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>operator==</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ac3cad2f7db1610e42296ecdb9ed29b5b" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>TimeSamplingType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a9b965f9de9834f67be771fda04abf7aa" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>TimeSamplingType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1ae62da1edf11d5e39bef2725cdce31999" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>TimeSamplingType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling_type_1a8cf90687dec8b4a7934cec9b6ac4b7ee" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::TimeSamplingType</scope><name>TimeSamplingType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
