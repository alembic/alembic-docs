<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</compoundname>
    <includes refid="_array_sample_8h" local="no">ArraySample.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a392c49901ad74b1ea3cd09b1040b0169" prot="public" static="no">
        <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref></type>
        <definition>typedef ArraySample Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="62" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1aab38e0d56fa5ca9cd3c263ca0ac0e61e" prot="public" static="no">
        <type><ref refid="struct_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_key" kindref="compound">ArraySampleKey</ref></type>
        <definition>typedef ArraySampleKey Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::Key</definition>
        <argsstring></argsstring>
        <name>Key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="63" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a8da93ad436b39483e6ab9d445ec21e55" prot="public" static="no">
        <type><ref refid="struct_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_key" kindref="compound">Key</ref></type>
        <definition>typedef Key Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="64" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ad3fb54843e2632e31e388cc06e0d226a" prot="private" static="no" mutable="no">
        <type>const void *</type>
        <definition>const void* Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="127" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a288194b5a435df7aedd9aed4bb2e12df" prot="private" static="no" mutable="no">
        <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref></type>
        <definition>DataType Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::m_dataType</definition>
        <argsstring></argsstring>
        <name>m_dataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="128" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af79b3d9283f907f937a46e8705cae741" prot="private" static="no" mutable="no">
        <type>Dimensions</type>
        <definition>Dimensions Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::m_dimensions</definition>
        <argsstring></argsstring>
        <name>m_dimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="129" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ae02b4beb2b0a36290dad1d687efc0de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::ArraySample</definition>
        <argsstring>()</argsstring>
        <name>ArraySample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor creates NULL bytes with degenerate dimensions. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="71" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ac5983880b0f0aa0c5349730be36efa8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::ArraySample</definition>
        <argsstring>(const void *iData, const DataType &amp;iDataType, const Dimensions &amp;iDims)</argsstring>
        <name>ArraySample</name>
        <param>
          <type>const void *</type>
          <declname>iData</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
          <declname>iDataType</declname>
        </param>
        <param>
          <type>const Dimensions &amp;</type>
          <declname>iDims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit constructor takes bytes and dims by reference and creates its own reference to them. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="80" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ac26c4c1097ad2eab2e999563f6e99f77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::getData</definition>
        <argsstring>() const </argsstring>
        <name>getData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using Default Copy Constructor Using Default Assignment Operator Return the data as a raw pointer ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="87" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ae756c0e3197f4f2aa9fe19f83baabd03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
        <definition>const DataType&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::getDataType</definition>
        <argsstring>() const </argsstring>
        <name>getDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the datatype. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="91" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a84903c3b66e5d53a14edd82a2e0aa31f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Dimensions &amp;</type>
        <definition>const Dimensions&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::getDimensions</definition>
        <argsstring>() const </argsstring>
        <name>getDimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the dimensions ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="95" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a4ebfc4de319aee9284aee93f8ff94f5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the &quot;size&quot;, which is <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a84903c3b66e5d53a14edd82a2e0aa31f" kindref="member">getDimensions()</ref>.numPoints() ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="99" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a11ad88b2d31d24f43b245765a6d33914" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_key" kindref="compound">Key</ref></type>
        <definition>Key Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::getKey</definition>
        <argsstring>() const </argsstring>
        <name>getKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the Key. This is a calculation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="103"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af127110f9e5979a741a07723e8f690f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::valid</definition>
        <argsstring>() const </argsstring>
        <name>valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return if it is valid. An empty <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref> is valid. however, an <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref> that is empty and has a scalar dimension is invalid. This is how we discriminate between setting a sample of length zero (useful in particle systems) vs. indicating an invalid sample (NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="112" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af8b78483c4ef0d693d29fb2911a41701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the array sample to an empty, invalid state. Basically the same as calling *this = <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ae02b4beb2b0a36290dad1d687efc0de7" kindref="member">ArraySample()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="120" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="119" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref> class is a reference to a block of memory corresponding to an array of instances of DataTypes. The array may be multi-rank, with different sizes in each dimension, but with its data ultimately stored contiguously. The class is basically just a bundle of a memory address, stored as a void*, a <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref>, and a Dimension.</para><para>The <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample" kindref="compound">ArraySample</ref> itself does not pretend to own the data referred to memory address &quot;data&quot;. It is just a reference. For data retention mgmt, see the note on ArraySamplePtr below. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="17">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample"/>
        <childnode refid="18" relation="usage">
          <edgelabel>m_dataType</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::DataType</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type"/>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" line="60" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/ArraySample.h" bodystart="59" bodyend="130"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ae02b4beb2b0a36290dad1d687efc0de7" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>ArraySample</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ac5983880b0f0aa0c5349730be36efa8b" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>ArraySample</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ac26c4c1097ad2eab2e999563f6e99f77" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>getData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ae756c0e3197f4f2aa9fe19f83baabd03" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a84903c3b66e5d53a14edd82a2e0aa31f" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>getDimensions</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a11ad88b2d31d24f43b245765a6d33914" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>getKey</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1aab38e0d56fa5ca9cd3c263ca0ac0e61e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>Key</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a8da93ad436b39483e6ab9d445ec21e55" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>key_type</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1ad3fb54843e2632e31e388cc06e0d226a" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>m_data</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a288194b5a435df7aedd9aed4bb2e12df" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>m_dataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af79b3d9283f907f937a46e8705cae741" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>m_dimensions</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af8b78483c4ef0d693d29fb2911a41701" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>reset</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a4ebfc4de319aee9284aee93f8ff94f5e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>size</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1a392c49901ad74b1ea3cd09b1040b0169" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>this_type</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_sample_1af127110f9e5979a741a07723e8f690f8" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArraySample</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
