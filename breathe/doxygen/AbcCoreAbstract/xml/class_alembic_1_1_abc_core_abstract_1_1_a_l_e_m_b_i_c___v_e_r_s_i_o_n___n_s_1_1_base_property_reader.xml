<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</compoundname>
    <derivedcompoundref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader" prot="public" virt="non-virtual">Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</derivedcompoundref>
    <derivedcompoundref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader" prot="public" virt="non-virtual">Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</derivedcompoundref>
    <derivedcompoundref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_scalar_property_reader" prot="public" virt="non-virtual">Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ScalarPropertyReader</derivedcompoundref>
    <includes refid="_base_property_reader_8h" local="no">BasePropertyReader.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a672435062a1e110fd193ea3c7f82744c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::~BasePropertyReader</definition>
        <argsstring>()</argsstring>
        <name>~BasePropertyReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual destructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="57"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ade14c5d7db0efe847d2b214ba45fc071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> &amp;</type>
        <definition>virtual const PropertyHeader&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getHeader</definition>
        <argsstring>() const =0</argsstring>
        <name>getHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Properties are created with a collection of metadata that is stored in a lightweight structure called <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref>. This returns a constant reference to the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> which was given upon creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a9a7b23f534175031581c1cc4862925e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getName</definition>
        <argsstring>() const </argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have a name, which is unique amongst its siblings in the compund property they all live in. This is the name that was given when the property was created, and is part of the property header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="74" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="73" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PropertyType</type>
        <definition>PropertyType Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getPropertyType</definition>
        <argsstring>() const </argsstring>
        <name>getPropertyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There are three types of abstract properties. They are Scalar, Array, and Compound properties. This function returns an enum PropertyType which indicates which property type is returned. This is simply a convenience function which returns data from the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="82" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="81" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a59d897b705e3a3ceeff74ae3e068f64e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::isScalar</definition>
        <argsstring>() const </argsstring>
        <name>isScalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is scalar. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" kindref="member">getPropertyType()</ref> == kScalarProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="86" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a7e314690fb71ca6588f8f6462e83ffe1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::isArray</definition>
        <argsstring>() const </argsstring>
        <name>isArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is array. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" kindref="member">getPropertyType()</ref> == kArrayProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="90" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a5bb42239463323668a463b2689616e54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::isCompound</definition>
        <argsstring>() const </argsstring>
        <name>isCompound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is compound. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" kindref="member">getPropertyType()</ref> == kCompoundProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="94" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a908162fdef5b79229bcb466521890bd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::isSimple</definition>
        <argsstring>() const </argsstring>
        <name>isSimple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is simple (non-compound) Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" kindref="member">getPropertyType()</ref> != kCompoundProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="98" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af8e668ae08e7a30019e725632a0d90c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> &amp;</type>
        <definition>const MetaData&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getMetaData</definition>
        <argsstring>() const </argsstring>
        <name>getMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref>. This just returns the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> portion of the header that was used in creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="103" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="102" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a03810de138b06e8c406841fa9c3c4b11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
        <definition>const DataType&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getDataType</definition>
        <argsstring>() const </argsstring>
        <name>getDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-compound properties have a <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref>. It is an error to call this function for CompoundProperties, and an exception will be thrown. This is a convenience function which just returns the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> from the header that was used in creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="110" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="109" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af31433c192a5e368108ed61abc6ba9af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TimeSamplingPtr</type>
        <definition>TimeSamplingPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getTimeSampling</definition>
        <argsstring>() const </argsstring>
        <name>getTimeSampling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-compound properties have a <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling" kindref="compound">TimeSampling</ref>. It is an error to call this function for CompoundProperties, and an exception will be thrown. This is a convenience function which just returns the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_time_sampling" kindref="compound">TimeSampling</ref> from the header that was used in creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="117" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="116" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a3d48f520baa360218715d1879e4584ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>ObjectReaderPtr</type>
        <definition>virtual ObjectReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getObject</definition>
        <argsstring>()=0</argsstring>
        <name>getObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have an object that owns them, and in order to ensure the object stays alive as long as the properties do, they retain a shared pointer to their object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1acc23e2bb3d7cd24dd81ff1ae80dfbced" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>CompoundPropertyReaderPtr</type>
        <definition>virtual CompoundPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::getParent</definition>
        <argsstring>()=0</argsstring>
        <name>getParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Most properties live in a compound property. (Except for the top-compound property in any object) This returns a pointer to the parent compound property. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="127"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a6bb1ea4123627a7af461518a85bc767e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ScalarPropertyReaderPtr</type>
        <definition>virtual ScalarPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::asScalarPtr</definition>
        <argsstring>()</argsstring>
        <name>asScalarPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Up-cast this base property to a ScalarProperty, if such an upcast is valid. This can be checked with the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a59d897b705e3a3ceeff74ae3e068f64e" kindref="member">isScalar()</ref> function. If the upcast is not valid, an empty pointer will be returned. This default implementation returns an empty pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a48fd973036944807cb076c2c477e2b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ArrayPropertyReaderPtr</type>
        <definition>virtual ArrayPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::asArrayPtr</definition>
        <argsstring>()</argsstring>
        <name>asArrayPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Up-cast this base property to an ArrayProperty, if such an upcast is valid. This can be checked with the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a7e314690fb71ca6588f8f6462e83ffe1" kindref="member">isArray()</ref> function. If the upcast is not valid, an empty pointer will be returned. This default implementation returns an empty pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="141"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ab09abe9a2b385089778c98bfb9e5855d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>CompoundPropertyReaderPtr</type>
        <definition>virtual CompoundPropertyReaderPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader::asCompoundPtr</definition>
        <argsstring>()</argsstring>
        <name>asCompoundPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Up-cast this base property to a CompoundProperty, if such an upcast is valid. This can be checked with the <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a5bb42239463323668a463b2689616e54" kindref="member">isCompound()</ref> function. If the upcast is not valid, an empty pointer will be returned. This default implementation returns an empty pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base Property Reader. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="27">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::CompoundPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_compound_property_reader"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ScalarPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_scalar_property_reader"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::ArrayPropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_array_property_reader"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader"/>
      </node>
    </inheritancegraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" line="53" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/BasePropertyReader.h" bodystart="51" bodyend="149"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a48fd973036944807cb076c2c477e2b4d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>asArrayPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ab09abe9a2b385089778c98bfb9e5855d" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>asCompoundPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a6bb1ea4123627a7af461518a85bc767e" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>asScalarPtr</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a03810de138b06e8c406841fa9c3c4b11" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1ade14c5d7db0efe847d2b214ba45fc071" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af8e668ae08e7a30019e725632a0d90c0" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a9a7b23f534175031581c1cc4862925e8" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a3d48f520baa360218715d1879e4584ca" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getObject</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1acc23e2bb3d7cd24dd81ff1ae80dfbced" prot="public" virt="pure-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getParent</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a899883189b969f6e3f5ad139822351ed" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1af31433c192a5e368108ed61abc6ba9af" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a7e314690fb71ca6588f8f6462e83ffe1" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a5bb42239463323668a463b2689616e54" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a59d897b705e3a3ceeff74ae3e068f64e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a908162fdef5b79229bcb466521890bd6" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_base_property_reader_1a672435062a1e110fd193ea3c7f82744c" prot="public" virt="virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::BasePropertyReader</scope><name>~BasePropertyReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
