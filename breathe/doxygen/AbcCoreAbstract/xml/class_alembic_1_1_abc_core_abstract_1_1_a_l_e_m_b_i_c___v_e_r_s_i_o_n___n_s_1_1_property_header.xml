<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kind="class" prot="public">
    <compoundname>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</compoundname>
    <includes refid="_property_header_8h" local="no">PropertyHeader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a6c55a174599d75624e038f7d4364cdf3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="188" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a70603fd29d8f56b1ee7264e1feade042" prot="private" static="no" mutable="no">
        <type>PropertyType</type>
        <definition>PropertyType Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::m_propertyType</definition>
        <argsstring></argsstring>
        <name>m_propertyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="189" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a60a04ec594d1ca58bc44a0ef83e8d4b9" prot="private" static="no" mutable="no">
        <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref></type>
        <definition>MetaData Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::m_metaData</definition>
        <argsstring></argsstring>
        <name>m_metaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="190" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a20541b8eafe06b3edc217f9a036f49de" prot="private" static="no" mutable="no">
        <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref></type>
        <definition>DataType Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::m_dataType</definition>
        <argsstring></argsstring>
        <name>m_dataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="191" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1af806a8b9cd3673e5277c00cbf507cdf4" prot="private" static="no" mutable="no">
        <type>TimeSamplingPtr</type>
        <definition>TimeSamplingPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::m_timeSampling</definition>
        <argsstring></argsstring>
        <name>m_timeSampling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="192" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a903d3fd9c5994e3ab5e46b37a2fc47ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::PropertyHeader</definition>
        <argsstring>()</argsstring>
        <name>PropertyHeader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor creates an invalid property. The propertyType is set to Scalar, but the dataType will be set to its default value of kUnknownPOD[1] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="89" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a5da9288f3aec508e4e314c791212906c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::PropertyHeader</definition>
        <argsstring>(const std::string &amp;iName, const MetaData &amp;iMetaData)</argsstring>
        <name>PropertyHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> &amp;</type>
          <declname>iMetaData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a compound property header. Just give a name and metadata, the rest is redundant or unused. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="99" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a29afac877db69eb81ddd40e91df8e19d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::PropertyHeader</definition>
        <argsstring>(const std::string &amp;iName, PropertyType iPropType, const MetaData &amp;iMetaData, const DataType &amp;iDataType, const TimeSamplingPtr &amp;iTsamp)</argsstring>
        <name>PropertyHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <param>
          <type>PropertyType</type>
          <declname>iPropType</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> &amp;</type>
          <declname>iMetaData</declname>
        </param>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
          <declname>iDataType</declname>
        </param>
        <param>
          <type>const TimeSamplingPtr &amp;</type>
          <declname>iTsamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a simple property header. Use this for array or scalar properties. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="112" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a3918b1fa9449c96972f6df290481ba7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::PropertyHeader</definition>
        <argsstring>(const PropertyHeader &amp;iCopy)</argsstring>
        <name>PropertyHeader</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> &amp;</type>
          <declname>iCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="121" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a1861110092d2392c01ecc45be38a518a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> &amp;</type>
        <definition>PropertyHeader&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::operator=</definition>
        <argsstring>(const PropertyHeader &amp;iCopy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> &amp;</type>
          <declname>iCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="126" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a586349af9c4a8d3ee9689d10b046394d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::getName</definition>
        <argsstring>() const </argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have a name, which is unique amongst its siblings. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="137" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a74ede00b46daf3fb004ad44eccb74aeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::setName</definition>
        <argsstring>(const std::string &amp;iName)</argsstring>
        <name>setName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="139" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PropertyType</type>
        <definition>PropertyType Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::getPropertyType</definition>
        <argsstring>() const </argsstring>
        <name>getPropertyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have a type, which is the enum defined above. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="143" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ae01f29ccaa8c74e564b6f2a93228367d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::setPropertyType</definition>
        <argsstring>(PropertyType iPtyp)</argsstring>
        <name>setPropertyType</name>
        <param>
          <type>PropertyType</type>
          <declname>iPtyp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="145" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aeebcce5eadbf7a6e95912d39413d184e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::isScalar</definition>
        <argsstring>() const </argsstring>
        <name>isScalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is scalar. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" kindref="member">getPropertyType()</ref> == kScalarProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="149" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ae5ccce0d21cc05678ab094965dbc876a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::isArray</definition>
        <argsstring>() const </argsstring>
        <name>isArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is array. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" kindref="member">getPropertyType()</ref> == kArrayProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="153" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aaa2710514d916e12085ab08673c9196c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::isCompound</definition>
        <argsstring>() const </argsstring>
        <name>isCompound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is compound. Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" kindref="member">getPropertyType()</ref> == kCompoundProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="157" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ad14caf8defd6c160b235069eb674ea5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::isSimple</definition>
        <argsstring>() const </argsstring>
        <name>isSimple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience to return whether the property is simple (non-compound) Same as <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" kindref="member">getPropertyType()</ref> != kCompoundProperty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="161" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a71743d26f68be061edff0ae739f42ddc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> &amp;</type>
        <definition>const MetaData&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::getMetaData</definition>
        <argsstring>() const </argsstring>
        <name>getMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All properties have metadata. ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="165" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a725612dc668369f9bf8bb2a7a011afd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::setMetaData</definition>
        <argsstring>(const MetaData &amp;iMetaData)</argsstring>
        <name>setMetaData</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> &amp;</type>
          <declname>iMetaData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="167" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aeae7cb078610630ad04cb2aac2cbaf00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
        <definition>const DataType&amp; Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::getDataType</definition>
        <argsstring>() const </argsstring>
        <name>getDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-compound properties have a data type. If this is called for a Compound Property (basically, one which returns kCompoundProperty from getType() above) it will throw an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="173" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1abf5874d7dcc2fe7a0ef8c1890b67a756" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::setDataType</definition>
        <argsstring>(const DataType &amp;iDataType)</argsstring>
        <name>setDataType</name>
        <param>
          <type>const <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
          <declname>iDataType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="175" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aa3182ecffdd877aed12e64d019aae7d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TimeSamplingPtr</type>
        <definition>TimeSamplingPtr Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::getTimeSampling</definition>
        <argsstring>() const </argsstring>
        <name>getTimeSampling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-compound properties have time sampling If this is called for a Compound Property (basically, one which returns kCompoundProperty from getType() above) it will throw an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="182" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="181" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a99247a93f97bb487ed14d2237f9a7040" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader::setTimeSampling</definition>
        <argsstring>(const TimeSamplingPtr &amp;iTsamp)</argsstring>
        <name>setTimeSampling</name>
        <param>
          <type>const TimeSamplingPtr &amp;</type>
          <declname>iTsamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="185" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="184" bodyend="185"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header" kindref="compound">PropertyHeader</ref> is a collection of <ref refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data" kindref="compound">MetaData</ref> which helps define a Property. It also acts as a key for getting an instance of a property from a CompoundProperty. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="58">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::MetaData</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_meta_data"/>
      </node>
      <node id="59">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::DataType</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_data_type"/>
      </node>
      <node id="57">
        <label>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</label>
        <link refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header"/>
        <childnode refid="58" relation="usage">
          <edgelabel>m_metaData</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_dataType</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" line="79" bodyfile="/var/tmp/doNotRemove/local/alembic-1.6.0/include/Alembic/AbcCoreAbstract/PropertyHeader.h" bodystart="78" bodyend="193"/>
    <listofallmembers>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aeae7cb078610630ad04cb2aac2cbaf00" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>getDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a71743d26f68be061edff0ae739f42ddc" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>getMetaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a586349af9c4a8d3ee9689d10b046394d" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>getName</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a30cd56f998bf920bbda2d56eb8c6fdc3" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>getPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aa3182ecffdd877aed12e64d019aae7d3" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>getTimeSampling</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ae5ccce0d21cc05678ab094965dbc876a" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>isArray</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aaa2710514d916e12085ab08673c9196c" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>isCompound</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1aeebcce5eadbf7a6e95912d39413d184e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>isScalar</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ad14caf8defd6c160b235069eb674ea5c" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>isSimple</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a20541b8eafe06b3edc217f9a036f49de" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>m_dataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a60a04ec594d1ca58bc44a0ef83e8d4b9" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>m_metaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a6c55a174599d75624e038f7d4364cdf3" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>m_name</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a70603fd29d8f56b1ee7264e1feade042" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>m_propertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1af806a8b9cd3673e5277c00cbf507cdf4" prot="private" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>m_timeSampling</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a1861110092d2392c01ecc45be38a518a" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>operator=</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a903d3fd9c5994e3ab5e46b37a2fc47ae" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>PropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a5da9288f3aec508e4e314c791212906c" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>PropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a29afac877db69eb81ddd40e91df8e19d" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>PropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a3918b1fa9449c96972f6df290481ba7e" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>PropertyHeader</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1abf5874d7dcc2fe7a0ef8c1890b67a756" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>setDataType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a725612dc668369f9bf8bb2a7a011afd6" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>setMetaData</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a74ede00b46daf3fb004ad44eccb74aeb" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>setName</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1ae01f29ccaa8c74e564b6f2a93228367d" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>setPropertyType</name></member>
      <member refid="class_alembic_1_1_abc_core_abstract_1_1_a_l_e_m_b_i_c___v_e_r_s_i_o_n___n_s_1_1_property_header_1a99247a93f97bb487ed14d2237f9a7040" prot="public" virt="non-virtual"><scope>Alembic::AbcCoreAbstract::ALEMBIC_VERSION_NS::PropertyHeader</scope><name>setTimeSampling</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
